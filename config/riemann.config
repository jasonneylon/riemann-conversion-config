; -*- mode: clojure; -*-
(use 'clj-time.core)

(logging/init :file "/var/log/riemann/riemann.log")

(tcp-server :host "0.0.0.0")
(udp-server :host "0.0.0.0")
(ws-server :host "0.0.0.0")
(repl-server :host "0.0.0.0")

;; Expire old events from the index every 5 seconds.
(periodically-expire 5 {:keep-keys [:host :service :tags :ttl]})

(let [index (default :ttl 10 (update-index (index)))]

  ;; Inbound events will be passed to these streams:
  (streams

   ;; Index all events immediately.
   index

   ;; Log expired events.

   (expired
    (fn [event] (info "expired" event))))

  ; Use another stream to catch the expired event as fixed/moving time window doesn't work as expected
  ; https://github.com/aphyr/riemann/issues/259
  (streams
    (where (and (service"app") (tagged"conversion"))
      (moving-time-window
        30
        (smap (fn [events]
                (let [conversion-count (count events)]
                   {:service"app-conversions"
                    :time (unix-time)
                    :metric conversion-count
                    :state (if (> conversion-count 0) "ok" "warning")
                    :description"Conversions in the last 30 seconds"
                    :ttl 30}))
                 index
                 (changed-state
                  (fn [event]
                    (warn "Conversion state has changed to: " event)))))))

  (streams
   (where (and (service "app") (tagged "conversion"))
          (moving-time-window
           30
           (smap (fn [events]
                   (let [conversion-count (count events)]
                     {:service "app-conversions"
                      :time (unix-time)
                      :metric conversion-count
                      :state "ok"
                      :description "Conversions in the last 30 seconds"
                      :ttl 30}))
                 index
                 (changed :state
                          (fn [event]
                            (info "notify that conversions are happening again" event)))))))

  (streams
   (expired
    (where (service "app-conversions")
           (with {:state "warning"
                  :metric 0
                  :ttl 30
                  :description "No conversions in the last 30 seconds"}
                 (fn [event]
                   (index event)
                    (warn "Notify about no conversions" event)))))))
